;buildInfoPackage: chisel3, version: 3.1.8, scalaVersion: 2.11.12, sbtVersion: 1.1.1, builtAtString: 2019-07-08 17:44:42.884, builtAtMillis: 1562607882884
circuit uart : 
  module uart : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip TXD_enable : UInt<1>, flip TXD_data : UInt<8>, RXD_data : UInt<8>, TXD : UInt<1>, flip RXD : UInt<1>}
    
    reg TxdLine : UInt<1>, clock with : (reset => (reset, UInt<1>("h01"))) @[uart.scala 18:30]
    reg TxdEnablePre : UInt<1>, clock @[uart.scala 19:35]
    TxdEnablePre <= io.TXD_enable @[uart.scala 19:35]
    wire TxdPosedge : UInt<1> @[uart.scala 20:30]
    wire TxdCheckBit : UInt<1> @[uart.scala 21:31]
    node _T_21 = eq(TxdEnablePre, UInt<1>("h00")) @[uart.scala 23:37]
    node _T_23 = eq(io.TXD_enable, UInt<1>("h01")) @[uart.scala 23:68]
    node _T_24 = and(_T_21, _T_23) @[uart.scala 23:50]
    TxdPosedge <= _T_24 @[uart.scala 23:20]
    reg TxdCnt : UInt<4>, clock with : (reset => (reset, UInt<4>("h0f"))) @[uart.scala 24:29]
    node _T_27 = bits(io.TXD_data, 7, 7) @[uart.scala 26:35]
    node _T_28 = bits(io.TXD_data, 6, 6) @[uart.scala 26:52]
    node _T_29 = xor(_T_27, _T_28) @[uart.scala 26:39]
    node _T_30 = bits(io.TXD_data, 5, 5) @[uart.scala 26:69]
    node _T_31 = xor(_T_29, _T_30) @[uart.scala 26:56]
    node _T_32 = bits(io.TXD_data, 4, 4) @[uart.scala 26:86]
    node _T_33 = xor(_T_31, _T_32) @[uart.scala 26:73]
    node _T_34 = bits(io.TXD_data, 3, 3) @[uart.scala 26:103]
    node _T_35 = xor(_T_33, _T_34) @[uart.scala 26:90]
    node _T_36 = bits(io.TXD_data, 2, 2) @[uart.scala 26:120]
    node _T_37 = xor(_T_35, _T_36) @[uart.scala 26:107]
    node _T_38 = bits(io.TXD_data, 1, 1) @[uart.scala 26:137]
    node _T_39 = xor(_T_37, _T_38) @[uart.scala 26:124]
    node _T_40 = bits(io.TXD_data, 0, 0) @[uart.scala 26:154]
    node _T_41 = xor(_T_39, _T_40) @[uart.scala 26:141]
    TxdCheckBit <= _T_41 @[uart.scala 26:21]
    when TxdPosedge : @[uart.scala 29:9]
      TxdCnt <= UInt<4>("h00") @[uart.scala 30:24]
      TxdLine <= UInt<1>("h00") @[uart.scala 31:25]
      skip @[uart.scala 29:9]
    else : @[uart.scala 34:9]
      node _T_45 = lt(TxdCnt, UInt<4>("h08")) @[uart.scala 33:27]
      when _T_45 : @[uart.scala 34:9]
        node _T_47 = add(TxdCnt, UInt<4>("h01")) @[uart.scala 35:34]
        node _T_48 = tail(_T_47, 1) @[uart.scala 35:34]
        TxdCnt <= _T_48 @[uart.scala 35:24]
        node _T_49 = dshr(io.TXD_data, TxdCnt) @[uart.scala 36:39]
        node _T_50 = bits(_T_49, 0, 0) @[uart.scala 36:39]
        TxdLine <= _T_50 @[uart.scala 36:25]
        skip @[uart.scala 34:9]
      else : @[uart.scala 39:9]
        node _T_52 = eq(TxdCnt, UInt<4>("h08")) @[uart.scala 38:27]
        when _T_52 : @[uart.scala 39:9]
          TxdLine <= TxdCheckBit @[uart.scala 40:25]
          node _T_54 = add(TxdCnt, UInt<4>("h01")) @[uart.scala 41:34]
          node _T_55 = tail(_T_54, 1) @[uart.scala 41:34]
          TxdCnt <= _T_55 @[uart.scala 41:24]
          skip @[uart.scala 39:9]
        else : @[uart.scala 44:9]
          TxdLine <= UInt<1>("h01") @[uart.scala 45:25]
          skip @[uart.scala 44:9]
    reg RxdLinePre : UInt, clock @[uart.scala 51:33]
    RxdLinePre <= io.RXD @[uart.scala 51:33]
    wire RxdStart : UInt<1> @[uart.scala 52:28]
    wire RxdLine : UInt<1> @[uart.scala 53:27]
    RxdLine <= io.RXD @[uart.scala 54:17]
    node _T_61 = eq(RxdLinePre, UInt<1>("h01")) @[uart.scala 55:33]
    node _T_63 = eq(RxdLine, UInt<1>("h00")) @[uart.scala 55:60]
    node _T_64 = and(_T_61, _T_63) @[uart.scala 55:47]
    RxdStart <= _T_64 @[uart.scala 55:18]
    reg RxdCnt : UInt<4>, clock with : (reset => (reset, UInt<4>("h0f"))) @[uart.scala 56:29]
    reg RxdReg : UInt<8>, clock with : (reset => (reset, UInt<8>("h00"))) @[uart.scala 57:29]
    reg RxdTempReg : UInt<8>, clock with : (reset => (reset, UInt<8>("h00"))) @[uart.scala 58:33]
    wire RxdCheckBit : UInt<1> @[uart.scala 59:31]
    node _T_72 = bits(RxdTempReg, 7, 7) @[uart.scala 61:34]
    node _T_73 = bits(RxdTempReg, 6, 6) @[uart.scala 61:50]
    node _T_74 = xor(_T_72, _T_73) @[uart.scala 61:38]
    node _T_75 = bits(RxdTempReg, 5, 5) @[uart.scala 61:66]
    node _T_76 = xor(_T_74, _T_75) @[uart.scala 61:54]
    node _T_77 = bits(RxdTempReg, 4, 4) @[uart.scala 61:82]
    node _T_78 = xor(_T_76, _T_77) @[uart.scala 61:70]
    node _T_79 = bits(RxdTempReg, 3, 3) @[uart.scala 61:98]
    node _T_80 = xor(_T_78, _T_79) @[uart.scala 61:86]
    node _T_81 = bits(RxdTempReg, 2, 2) @[uart.scala 61:114]
    node _T_82 = xor(_T_80, _T_81) @[uart.scala 61:102]
    node _T_83 = bits(RxdTempReg, 1, 1) @[uart.scala 61:130]
    node _T_84 = xor(_T_82, _T_83) @[uart.scala 61:118]
    node _T_85 = bits(RxdTempReg, 0, 0) @[uart.scala 61:146]
    node _T_86 = xor(_T_84, _T_85) @[uart.scala 61:134]
    RxdCheckBit <= _T_86 @[uart.scala 61:21]
    when RxdStart : @[uart.scala 64:9]
      RxdCnt <= UInt<4>("h00") @[uart.scala 65:24]
      RxdTempReg <= UInt<8>("h00") @[uart.scala 66:28]
      skip @[uart.scala 64:9]
    else : @[uart.scala 69:9]
      node _T_90 = lt(RxdCnt, UInt<4>("h08")) @[uart.scala 68:27]
      when _T_90 : @[uart.scala 69:9]
        node _T_92 = add(RxdCnt, UInt<4>("h01")) @[uart.scala 70:34]
        node _T_93 = tail(_T_92, 1) @[uart.scala 70:34]
        RxdCnt <= _T_93 @[uart.scala 70:24]
        node _T_94 = or(RxdTempReg, io.RXD) @[uart.scala 71:42]
        RxdTempReg <= _T_94 @[uart.scala 71:28]
        skip @[uart.scala 69:9]
      else : @[uart.scala 74:9]
        node _T_96 = eq(RxdCnt, UInt<4>("h08")) @[uart.scala 73:27]
        when _T_96 : @[uart.scala 74:9]
          node _T_98 = add(RxdCnt, UInt<4>("h01")) @[uart.scala 75:34]
          node _T_99 = tail(_T_98, 1) @[uart.scala 75:34]
          RxdCnt <= _T_99 @[uart.scala 75:24]
          node _T_100 = bits(RxdLine, 0, 0) @[uart.scala 77:31]
          node _T_101 = eq(_T_100, RxdCheckBit) @[uart.scala 77:38]
          when _T_101 : @[uart.scala 78:17]
            RxdReg <= RxdTempReg @[uart.scala 79:32]
            skip @[uart.scala 78:17]
          skip @[uart.scala 74:9]
    io.RXD_data <= RxdReg @[uart.scala 83:21]
    io.TXD <= TxdLine @[uart.scala 84:16]
    
